<template>
  <div class="viewport">
    <div :class="['app-container', { fullscreen: isFullscreen }]">
      <!-- 顶部导航栏 -->
      <div class="top-bar">
        <h1 class="app-title">💬 AI聊天模拟器</h1>
        <div class="top-actions">
          <button @click="showCreateRoomModal = true" class="btn-create">
            ➕ 创建群聊
          </button>
          <button @click="showJoinRoomModal = true" class="btn-join">
            🔍 加入群聊
          </button>
          <button
            @click="toggleViewMode"
            class="btn-view-mode"
            :title="isFullscreen ? '手机模式' : '全屏模式'"
          >
            {{ isFullscreen ? "📱" : "🖥️" }}
          </button>
        </div>
      </div>

      <!-- Tab导航 -->
      <div class="tabs">
        <button
          :class="['tab-btn', { active: activeTab === 'my-rooms' }]"
          @click="activeTab = 'my-rooms'"
        >
          我的群聊
        </button>
        <button
          :class="['tab-btn', { active: activeTab === 'created' }]"
          @click="activeTab = 'created'"
        >
          我创建的
        </button>
        <button
          :class="['tab-btn', { active: activeTab === 'profile' }]"
          @click="activeTab = 'profile'"
        >
          我的
        </button>
      </div>

      <!-- Tab内容 -->
      <div class="tab-content">
        <!-- 我的群聊列表 -->
        <div v-if="activeTab === 'my-rooms'" class="room-list">
          <!-- 预设房间 -->
          <div class="preset-rooms-section">
            <h3 class="section-title">🎭 热门剧本</h3>
            <div class="preset-rooms-grid">
              <div
                v-for="room in presetRooms"
                :key="room.id"
                class="preset-room-card"
                :data-avatar="room.avatar"
                @click="joinPresetRoom(room.id)"
              >
                <div class="preset-room-content">
                  <h4>{{ room.name }}</h4>
                  <p>{{ room.description }}</p>
                  <div class="preset-room-meta">
                    <span class="room-type">{{ room.type }}</span>
                    <span class="room-players">{{ room.players }}人</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- 我的群聊 -->
          <div class="my-rooms-section">
            <h3 class="section-title">我的群聊</h3>
            <div v-if="myRooms.length === 0" class="empty-state">
              <div class="empty-icon">📭</div>
              <p>还没有加入任何群聊</p>
              <p class="hint">点击上方按钮创建或加入群聊</p>
            </div>

            <div
              v-for="room in myRooms"
              :key="room.id"
              class="room-card"
              :data-avatar="room.avatar || '聊'"
              @click="enterRoom(room.id)"
            >
              <!-- 未读数量徽章 -->
              <div
                v-if="room.unread_count && room.unread_count > 0"
                class="unread-badge"
              >
                {{ room.unread_count > 99 ? "99+" : room.unread_count }}
              </div>

              <div class="room-content">
                <div class="room-header">
                  <h3>{{ room.name }}</h3>
                  <span class="room-time">{{
                    formatDate(room.created_at)
                  }}</span>
                </div>
                <div class="room-footer">
                  <div class="last-message">
                    {{ room.last_message || "还没有消息" }}
                  </div>
                  <span class="room-members">{{
                    formatMemberCount(room)
                  }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- 我创建的群聊 -->
        <div v-if="activeTab === 'created'" class="room-list">
          <div v-if="createdRooms.length === 0" class="empty-state">
            <div class="empty-icon">✨</div>
            <p>还没有创建任何群聊</p>
            <p class="hint">点击上方"创建群聊"开始创作</p>
          </div>

          <div
            v-for="room in createdRooms"
            :key="room.id"
            class="room-card-created"
          >
            <div class="room-header">
              <h3>{{ room.name }}</h3>
              <span class="creator-badge">创建者</span>
            </div>
            <p class="room-id">房间ID：{{ room.id }}</p>
            <p class="room-desc">{{ room.description || "暂无描述" }}</p>
            <div class="room-footer">
              <span>{{ room.member_count }}名成员</span>
              <span>{{ room.message_count }}条消息</span>
            </div>
            <div class="room-actions">
              <button @click="enterRoom(room.id)" class="btn-enter">
                💬 进入聊天室
              </button>
              <button @click="editRoom(room.id)" class="btn-edit">
                ⚙️ 编辑设置
              </button>
            </div>
          </div>
        </div>

        <!-- 个人信息 -->
        <div v-if="activeTab === 'profile'" class="profile-section">
          <div class="profile-card">
            <div class="avatar-section">
              <img
                :src="user?.avatar || '/avatars/placeholder.svg'"
                alt="头像"
                class="profile-avatar"
              />
              <label class="change-avatar-btn">
                更换头像
                <input
                  type="file"
                  accept="image/*"
                  @change="uploadAvatar"
                  hidden
                />
              </label>
            </div>

            <div class="profile-info">
              <div class="info-item">
                <label>用户名</label>
                <div class="info-value">{{ user?.username }}</div>
              </div>

              <div class="info-item">
                <label>昵称</label>
                <div class="info-value">{{ user?.nickname }}</div>
              </div>

              <div class="info-item">
                <label>加入时间</label>
                <div class="info-value">{{ formatDate(user?.created_at) }}</div>
              </div>
            </div>

            <!-- 管理员入口 -->
            <div
              v-if="
                user && (user.username === 'jerry' || user.username === 'admin')
              "
              class="admin-section"
            >
              <button @click="showAdminDatabase" class="btn-admin">
                🔧 查看数据库
              </button>
            </div>

            <button @click="handleLogout" class="btn-logout">退出登录</button>
          </div>
        </div>
      </div>

      <!-- 创建房间弹窗 -->
      <div
        v-if="showCreateRoomModal"
        class="modal-overlay"
        @click="showCreateRoomModal = false"
      >
        <div class="modal-content" @click.stop>
          <h2>创建群聊</h2>
          <p class="modal-subtitle">设置剧情和NPC角色</p>

          <CreateRoomForm
            @created="handleRoomCreated"
            @cancel="showCreateRoomModal = false"
          />
        </div>
      </div>

      <!-- 加入房间弹窗 -->
      <div
        v-if="showJoinRoomModal"
        class="modal-overlay"
        @click="showJoinRoomModal = false"
      >
        <div class="modal-content small" @click.stop>
          <h2>{{ joinRoomId ? "设置人设" : "加入群聊" }}</h2>
          <p class="modal-subtitle">
            {{ joinRoomId ? "选择你的角色并设置人设" : "输入群聊ID即可加入" }}
          </p>

          <div class="join-form">
            <div class="form-group">
              <label>房间ID</label>
              <input
                v-if="!joinRoomIdLocked"
                v-model="joinRoomId"
                type="text"
                placeholder="请输入6位房间ID"
                class="input"
                maxlength="6"
              />
              <div v-else class="input-readonly">{{ joinRoomId }}</div>
            </div>

            <div class="join-character-setup">
              <h3>设置你的角色</h3>

              <!-- 头像选择 -->
              <div class="join-avatar-section">
                <img
                  :src="
                    joinRoleAvatar || user?.avatar || '/avatars/placeholder.svg'
                  "
                  alt="角色头像"
                  class="join-avatar-preview"
                />
                <label class="btn-upload-join-avatar">
                  上传头像
                  <input
                    type="file"
                    accept="image/*"
                    @change="uploadJoinAvatar"
                    hidden
                  />
                </label>
              </div>

              <input
                v-model="joinRoleName"
                type="text"
                placeholder="角色名称（可选）"
                class="input"
              />
              <textarea
                v-model="joinRoleProfile"
                placeholder="角色人设（可选）"
                rows="3"
                class="textarea"
              ></textarea>
            </div>

            <div v-if="joinError" class="error-msg">{{ joinError }}</div>

            <div class="modal-actions">
              <button @click="showJoinRoomModal = false" class="btn-cancel">
                取消
              </button>
              <button
                @click="handleJoinRoom"
                class="btn-confirm"
                :disabled="!joinRoomId"
              >
                加入
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- 管理员数据库查看弹窗 -->
      <div
        v-if="showAdminDatabaseModal"
        class="modal-overlay"
        @click="showAdminDatabaseModal = false"
      >
        <div
          class="modal-content"
          style="max-width: 900px; max-height: 90vh"
          @click.stop
        >
          <h2>🔧 数据库管理</h2>
          <p class="modal-subtitle">查看用户注册信息和聊天内容</p>

          <div
            v-if="adminDatabaseLoading"
            style="text-align: center; padding: 2rem"
          >
            <p>加载中...</p>
          </div>

          <div v-else-if="adminDatabaseData" class="admin-db-view">
            <!-- 统计信息 -->
            <div class="stats-grid">
              <div class="stat-card">
                <div class="stat-value">
                  {{ adminDatabaseData.stats.totalUsers }}
                </div>
                <div class="stat-label">总用户数</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">
                  {{ adminDatabaseData.stats.totalMessages }}
                </div>
                <div class="stat-label">总消息数</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">
                  {{ adminDatabaseData.stats.totalRooms }}
                </div>
                <div class="stat-label">总房间数</div>
              </div>
            </div>

            <!-- 用户列表 -->
            <div class="db-section">
              <h3>
                用户列表（最新{{
                  adminDatabaseData.stats.latestUsers.length
                }}位）
              </h3>
              <div class="table-container">
                <table class="admin-table">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>用户名</th>
                      <th>昵称</th>
                      <th>注册时间</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr
                      v-for="u in adminDatabaseData.stats.latestUsers"
                      :key="u.id"
                    >
                      <td>{{ u.id }}</td>
                      <td>{{ u.username }}</td>
                      <td>{{ u.nickname }}</td>
                      <td>{{ formatDate(u.created_at) }}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>

            <!-- 消息列表 -->
            <div class="db-section">
              <h3>
                最新消息（最近{{
                  adminDatabaseData.stats.latestMessages.length
                }}条）
              </h3>
              <div class="table-container">
                <table class="admin-table">
                  <thead>
                    <tr>
                      <th>时间</th>
                      <th>房间</th>
                      <th>发送者</th>
                      <th>内容</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr
                      v-for="m in adminDatabaseData.stats.latestMessages"
                      :key="m.id"
                    >
                      <td>{{ formatDate(m.created_at) }}</td>
                      <td>{{ m.room_name }}</td>
                      <td>{{ m.sender_name }}</td>
                      <td
                        style="
                          max-width: 200px;
                          overflow: hidden;
                          text-overflow: ellipsis;
                        "
                      >
                        {{ m.content }}
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <div class="modal-actions">
            <button @click="showAdminDatabaseModal = false" class="btn-cancel">
              关闭
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, onUnmounted } from "vue";

definePageMeta({
  middleware: "auth",
});

const activeTab = ref("my-rooms");
const user = ref(null);
const myRooms = ref([]);
const createdRooms = ref([]);
const isFullscreen = ref(true); // 默认全屏（电脑模式）

// 预设房间数据
const presetRooms = ref([
  {
    id: "DRAMA1",
    name: "家庭纠纷调解",
    description: "复杂的家庭关系协商与沟通",
    avatar: "💔",
    type: "剧情",
    players: 4,
  },
  {
    id: "DRAMA2",
    name: "特朗普vs拜登大选",
    description: "2020年美国大选激烈对决",
    avatar: "🗳️",
    type: "政治",
    players: 4,
  },
  {
    id: "DRAMA3",
    name: "甄嬛传后宫争宠",
    description: "清朝后宫妃嫔争宠大戏",
    avatar: "👑",
    type: "古装",
    players: 4,
  },
  {
    id: "DRAMA4",
    name: "复仇者联盟内战",
    description: "超级英雄因理念分歧而分裂",
    avatar: "⚔️",
    type: "科幻",
    players: 4,
  },
  {
    id: "DRAMA5",
    name: "甄嬛传现代版",
    description: "现代职场版甄嬛传",
    avatar: "💼",
    type: "职场",
    players: 4,
  },
]);

const showCreateRoomModal = ref(false);
const showJoinRoomModal = ref(false);
const showAdminDatabaseModal = ref(false);
const adminDatabaseData = ref(null);
const adminDatabaseLoading = ref(false);
const joinRoomId = ref("");
const joinRoomIdLocked = computed(() => !!joinRoomId.value);
const joinRoleName = ref("");
const joinRoleProfile = ref("");
const joinRoleAvatar = ref("");
const joinError = ref("");

// 定时刷新房间列表（更新未读数）
let refreshInterval = null;

onMounted(async () => {
  await loadUser();
  await loadMyRooms();
  await loadCreatedRooms();

  // 每10秒刷新一次房间列表以更新未读数
  refreshInterval = setInterval(async () => {
    await loadMyRooms();
  }, 10000);
});

// 清理定时器
onUnmounted(() => {
  if (refreshInterval) {
    clearInterval(refreshInterval);
  }
});

const loadUser = async () => {
  try {
    const response = await $fetch("/api/auth/me");
    if (response.success) {
      user.value = response.user;
    } else {
      navigateTo("/login");
    }
  } catch (error) {
    navigateTo("/login");
  }
};

const loadMyRooms = async () => {
  try {
    const response = await $fetch("/api/rooms/my-rooms");
    if (response.success) {
      myRooms.value = response.rooms;
    }
  } catch (error) {
    console.error("加载房间列表失败:", error);
  }
};

const loadCreatedRooms = async () => {
  try {
    const response = await $fetch("/api/rooms/my-created");
    if (response.success) {
      createdRooms.value = response.rooms;
    }
  } catch (error) {
    console.error("加载创建的房间失败:", error);
  }
};

const enterRoom = (roomId) => {
  navigateTo(`/room/${roomId}`);
};

const editRoom = (roomId) => {
  navigateTo(`/room/${roomId}/edit`);
};

const handleRoomCreated = async (roomId) => {
  showCreateRoomModal.value = false;
  await loadMyRooms();
  await loadCreatedRooms();

  // 群主创建后需要设置自己的人设才能进入
  alert("群聊创建成功！请设置你的角色人设");
  showJoinRoomModal.value = true;
  joinRoomId.value = roomId;
};

const showAdminDatabase = () => { navigateTo("/admin/database"); }
const old_showAdminDatabase_UNUSED = async {
  showAdminDatabaseModal.value = true;
  adminDatabaseLoading.value = true;

  try {
    const response = await $fetch("/api/admin/database");

    if (response.success) {
      adminDatabaseData.value = response.data;
    } else {
      alert("加载失败: " + response.error);
      showAdminDatabaseModal.value = false;
    }
  } catch (error) {
    console.error("加载数据库信息失败:", error);
    alert("加载失败，请重试");
    showAdminDatabaseModal.value = false;
  } finally {
    adminDatabaseLoading.value = false;
  }
};

const handleJoinRoom = async () => {
  joinError.value = "";

  if (!joinRoomId.value) {
    joinError.value = "请输入房间ID";
    return;
  }

  const targetRoomId = joinRoomId.value.toUpperCase();

  try {
    const response = await $fetch("/api/rooms/join", {
      method: "POST",
      body: {
        roomId: targetRoomId,
        roleName: joinRoleName.value,
        roleProfile: joinRoleProfile.value,
        avatar: joinRoleAvatar.value || user.value?.avatar, // 传递头像
      },
    });

    if (response.success) {
      showJoinRoomModal.value = false;
      joinRoomId.value = "";
      joinRoleName.value = "";
      joinRoleProfile.value = "";
      joinRoleAvatar.value = "";
      await loadMyRooms();
      enterRoom(targetRoomId);
    } else {
      joinError.value = response.error;
    }
  } catch (error) {
    joinError.value = "加入失败，请重试";
  }
};

const uploadJoinAvatar = async (event) => {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = (e) => {
    joinRoleAvatar.value = e.target.result;
  };
  reader.readAsDataURL(file);
};

const uploadAvatar = async (event) => {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = async (e) => {
      const avatarData = e.target.result;

      try {
        const response = await $fetch("/api/user/update-avatar", {
          method: "POST",
          body: { avatar: avatarData },
        });

        if (response.success) {
          user.value.avatar = avatarData;
          alert("头像更新成功！");
        } else {
          alert("头像更新失败：" + response.error);
        }
      } catch (error) {
        alert("上传失败，请重试");
      }
    };
    reader.readAsDataURL(file);
  }
};

const handleLogout = async () => {
  await $fetch("/api/auth/logout", { method: "POST" });
  navigateTo("/login");
};

const toggleViewMode = () => {
  isFullscreen.value = !isFullscreen.value;
};

const formatDate = (dateStr) => {
  if (!dateStr) return "";
  return new Date(dateStr).toLocaleDateString("zh-CN");
};

const formatMemberCount = (room) => {
  const npcCount = room.npc_count || 0;
  const playerCount = room.member_count || 0;
  const total = npcCount + playerCount;

  if (npcCount > 0) {
    return `${total}人（${npcCount}AI+${playerCount}玩家）`;
  }
  return `${total}人`;
};

// 加入热门房间（避免重复创建）
const joinPresetRoom = async (roomId) => {
  try {
    // 先检查该热门房间是否已存在
    const checkResponse = await $fetch(
      `/api/rooms/check-preset?presetId=${roomId}`
    );

    let finalRoomId = null;

    if (checkResponse.exists) {
      // 房间已存在，直接使用
      finalRoomId = checkResponse.roomId;
    } else {
      // 房间不存在，创建新的
      const createResponse = await $fetch("/api/rooms/create", {
        method: "POST",
        body: {
          presetId: roomId, // 添加预设ID标识
          name:
            presetRooms.value.find((r) => r.id === roomId)?.name || "热门房间",
          description:
            presetRooms.value.find((r) => r.id === roomId)?.description || "",
          eventBackground: getPresetEventBackground(roomId),
          dialogueDensity: 3,
          avatar:
            presetRooms.value.find((r) => r.id === roomId)?.avatar || "💬",
          npcs: getPresetNPCs(roomId),
        },
      });

      if (!createResponse.success) {
        alert("创建失败: " + createResponse.error);
        return;
      }
      finalRoomId = createResponse.roomId;
    }

    // 弹出选择人设的对话框
    joinRoomId.value = finalRoomId;
    showJoinRoomModal.value = true;
  } catch (error) {
    console.error("加入热门房间失败:", error);
    alert("操作失败，请重试");
  }
};

// 获取预设房间的事件背景
const getPresetEventBackground = (roomId) => {
  const backgrounds = {
    DRAMA1:
      "一个普通家庭因为信任危机和沟通问题产生了严重矛盾。家庭成员之间存在误会和分歧，需要通过坦诚对话来化解矛盾，重新建立信任关系。",
    DRAMA2:
      "2020年美国大选是历史上最激烈和争议的总统选举之一。现任总统特朗普寻求连任，而前副总统拜登代表民主党挑战。",
    DRAMA3:
      "雍正年间，后宫佳丽三千，争宠不断。甄嬛初入宫时天真烂漫，但很快被卷入后宫的权力斗争。",
    DRAMA4:
      "《美国队长3：内战》事件。由于超级英雄的行动造成了大量平民伤亡，联合国要求所有超级英雄签署《索科维亚协议》，接受政府监管。",
    DRAMA5:
      "某知名互联网公司内部，CEO突然宣布退休，引发了一场激烈的权力争夺战。各部门总监为了争夺CEO职位，展开了激烈的竞争。",
  };
  return backgrounds[roomId] || "这是一个预设的剧本房间，欢迎参与讨论！";
};

// 获取预设房间的NPC配置
const getPresetNPCs = (roomId) => {
  const npcConfigs = {
    DRAMA1: [
      {
        name: "父亲",
        avatar:
          "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=100&h=100&fit=crop",
        profile: "家庭的经济支柱，性格严肃，希望维护家庭和谐但沟通方式较为强硬",
      },
      {
        name: "母亲",
        avatar:
          "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=100&h=100&fit=crop",
        profile: "温柔但有自己的想法，在家庭矛盾中试图平衡各方关系",
      },
      {
        name: "子女",
        avatar:
          "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop",
        profile: "年轻一代，追求独立和自由，与父母有代沟，希望被理解",
      },
    ],
    DRAMA2: [
      {
        name: "特朗普",
        avatar:
          "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop",
        profile: "现任总统，强硬保守派，坚持美国优先政策",
      },
      {
        name: "拜登",
        avatar:
          "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop",
        profile: "前副总统，温和派民主党人，主张团结与和解",
      },
      {
        name: "CNN记者",
        avatar:
          "https://images.unsplash.com/photo-1580489944761-15a19d654956?w=100&h=100&fit=crop",
        profile: "中立媒体记者，负责采访和报道选举进展",
      },
    ],
    DRAMA3: [
      {
        name: "甄嬛",
        avatar:
          "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop",
        profile: "聪慧美丽的妃子，从天真烂漫到腹黑权谋的蜕变",
      },
      {
        name: "华妃",
        avatar:
          "https://images.unsplash.com/photo-1524504388940-b1c1722653e1?w=100&h=100&fit=crop",
        profile: "骄横跋扈的宠妃，依仗年羹尧的权势嚣张跋扈",
      },
      {
        name: "皇后",
        avatar:
          "https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=100&h=100&fit=crop",
        profile: "表面慈祥实则城府极深的后宫主宰者",
      },
    ],
    DRAMA4: [
      {
        name: "美国队长",
        avatar:
          "https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?w=100&h=100&fit=crop",
        profile: "坚持自由，反对被政府控制，相信英雄应该独立行动",
      },
      {
        name: "钢铁侠",
        avatar:
          "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=100&h=100&fit=crop",
        profile: "支持接受政府监管，认为超级英雄需要制约",
      },
      {
        name: "黑寡妇",
        avatar:
          "https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=100&h=100&fit=crop",
        profile: "在两方之间摇摆不定，最终选择站队",
      },
    ],
    DRAMA5: [
      {
        name: "技术总监",
        avatar:
          "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop",
        profile: "技术派，擅长产品和研发，有野心但缺乏政治手腕",
      },
      {
        name: "运营总监",
        avatar:
          "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=100&h=100&fit=crop",
        profile: "善于沟通协调，手腕圆滑，背后运作能力强",
      },
      {
        name: "销售总监",
        avatar:
          "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop",
        profile: "业绩出色，强势果断，在公司有很强的话语权",
      },
    ],
  };
  return npcConfigs[roomId] || [];
};
</script>

<style scoped>
.viewport {
  height: 100vh;
  width: 100vw;
  background: #2c2c2c;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0;
  overflow: hidden;
}

.app-container {
  width: 100%;
  max-width: 420px;
  height: 100vh;
  background: #ededed;
  display: flex;
  flex-direction: column;
  border-radius: 0;
  overflow: hidden;
  box-shadow: none;
}

.app-container.fullscreen {
  max-width: 100%;
  height: 100vh;
  border-radius: 0;
  box-shadow: none;
}

@media (max-width: 768px) {
  .viewport {
    padding: 0;
  }

  .app-container {
    max-width: 100%;
    height: 100vh;
    max-height: 100vh;
    border-radius: 0;
  }
}

.top-bar {
  background: white;
  padding: 0.8rem 1rem;
  border-bottom: 1px solid #e5e5e5;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.app-title {
  margin: 0;
  font-size: 1.3rem;
  color: #000;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.top-actions {
  display: flex;
  gap: 0.5rem;
}

.btn-create,
.btn-join {
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-create {
  background: #07c160;
  color: white;
}

.btn-join {
  background: white;
  color: #576b95;
  border: 1px solid #576b95;
}

.btn-create:active {
  background: #06ad56;
}

.btn-join:active {
  background: #f0f0f0;
}

.btn-view-mode {
  padding: 0.5rem 0.8rem;
  border: none;
  border-radius: 4px;
  font-size: 1.2rem;
  cursor: pointer;
  background: transparent;
  transition: all 0.2s;
}

.btn-view-mode:hover {
  background: #f0f0f0;
}

.btn-view-mode:active {
  transform: scale(0.95);
}

.tabs {
  background: white;
  display: flex;
  border-bottom: 1px solid #e5e5e5;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);
}

.tab-btn {
  flex: 1;
  padding: 0.8rem;
  background: none;
  border: none;
  border-bottom: 3px solid transparent;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
  font-size: 1rem;
  transition: all 0.2s;
  font-weight: 500;
  position: relative;
}

.tab-btn.active {
  color: #000;
  border-bottom-color: #07c160;
  font-weight: 600;
}

.tab-btn:hover {
  color: #07c160;
  background: rgba(7, 193, 96, 0.05);
}

.tab-content {
  flex: 1;
  overflow-y: auto;
  padding: 0;
}

.room-list {
  display: flex;
  flex-direction: column;
}

.section-title {
  margin: 0 0 1rem 0;
  font-size: 1rem;
  color: #333;
  font-weight: 600;
  padding: 0 1rem;
}

.preset-rooms-section {
  margin-bottom: 2rem;
}

.preset-rooms-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 0.8rem;
  padding: 0 1rem;
  margin-bottom: 1rem;
}

.preset-room-card {
  background: white;
  border-radius: 8px;
  padding: 1rem;
  cursor: pointer;
  transition: all 0.2s;
  border: 1px solid #e5e5e5;
  position: relative;
  overflow: hidden;
}

.preset-room-card::before {
  content: attr(data-avatar);
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  font-size: 1.5rem;
  opacity: 0.3;
}

.preset-room-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  border-color: #07c160;
}

.preset-room-content h4 {
  margin: 0 0 0.5rem 0;
  font-size: 0.9rem;
  color: #333;
  font-weight: 600;
  line-height: 1.3;
}

.preset-room-content p {
  margin: 0 0 0.8rem 0;
  font-size: 0.8rem;
  color: #666;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.preset-room-meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.75rem;
}

.room-type {
  background: #f0f0f0;
  color: #666;
  padding: 0.2rem 0.5rem;
  border-radius: 10px;
}

.room-players {
  color: #999;
}

.my-rooms-section {
  padding-top: 1rem;
  border-top: 1px solid #f0f0f0;
}

.room-card {
  background: white;
  padding: 0.8rem 1rem;
  cursor: pointer;
  transition: all 0.2s;
  border-bottom: 1px solid #e5e5e5;
  display: flex;
  align-items: center;
  gap: 0.8rem;
  position: relative;
}

.unread-badge {
  position: absolute;
  top: 0.6rem;
  left: 2.5rem;
  background: #fa5151;
  color: white;
  font-size: 0.7rem;
  font-weight: 600;
  padding: 0.15rem 0.4rem;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
  box-shadow: 0 1px 3px rgba(250, 81, 81, 0.4);
  z-index: 10;
}

.room-card:hover {
  background: #f8f8f8;
}

.room-card:active {
  background: #f0f0f0;
}

.room-card.created {
  background: #f8f8f8;
}

.room-card::before {
  content: attr(data-avatar);
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #07c160 0%, #05a850 100%);
  border-radius: 6px;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.2rem;
  font-weight: 600;
  flex-shrink: 0;
}

.room-content {
  flex: 1;
  min-width: 0;
}

.room-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.3rem;
}

.room-header h3 {
  margin: 0;
  font-size: 1.05rem;
  color: #000;
  font-weight: 500;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.room-time {
  font-size: 0.75rem;
  color: #999;
  flex-shrink: 0;
  margin-left: 0.5rem;
}

.room-members {
  background: #07c160;
  color: white;
  padding: 0.15rem 0.5rem;
  border-radius: 10px;
  font-size: 0.7rem;
  margin-left: 0.5rem;
}

.creator-badge {
  background: #576b95;
  color: white;
  padding: 0.15rem 0.5rem;
  border-radius: 10px;
  font-size: 0.7rem;
  margin-left: 0.5rem;
}

.room-id {
  font-family: "Courier New", monospace;
  color: #999;
  font-size: 0.8rem;
  margin: 0.2rem 0;
}

.room-desc {
  display: none;
}

.room-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.85rem;
  color: #999;
}

.last-message {
  flex: 1;
  font-size: 0.9rem;
  color: #999;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  margin: 0;
  padding: 0;
  background: none;
}

.room-actions {
  display: flex;
  gap: 0.5rem;
  margin-top: 0.8rem;
}

.btn-enter,
.btn-edit {
  flex: 1;
  padding: 0.6rem;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.1s;
  font-size: 0.9rem;
}

.btn-enter {
  background: #07c160;
  color: white;
}

.btn-enter:active {
  background: #06ad56;
}

.btn-edit {
  background: #f0f0f0;
  color: #000;
}

.btn-edit:active {
  background: #e0e0e0;
}

.room-card-created {
  background: white;
  padding: 1.2rem;
  margin-bottom: 1rem;
  border-radius: 8px;
  border: 1px solid #e5e5e5;
  margin: 0 1rem 1rem 1rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  transition: all 0.2s;
}

.room-card-created:hover {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-color: #07c160;
}

.room-card-created .room-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.8rem;
}

.room-card-created h3 {
  margin: 0;
  font-size: 1.1rem;
  color: #000;
  font-weight: 500;
}

.room-card-created .room-id {
  font-family: "Courier New", monospace;
  color: #999;
  font-size: 0.85rem;
  margin: 0.3rem 0 0.5rem 0;
}

.room-card-created .room-desc {
  display: block;
  color: #888;
  font-size: 0.9rem;
  line-height: 1.5;
  margin: 0.5rem 0;
}

.room-card-created .room-footer {
  display: flex;
  justify-content: space-between;
  font-size: 0.85rem;
  color: #999;
  margin: 0.8rem 0;
  padding-top: 0.8rem;
  border-top: 1px solid #f0f0f0;
}

.empty-state {
  text-align: center;
  padding: 6rem 2rem;
  color: #999;
  background: white;
}

.empty-icon {
  font-size: 4rem;
  margin-bottom: 1.5rem;
  opacity: 0.3;
  filter: grayscale(1);
}

.empty-state p {
  font-size: 1rem;
  color: #666;
  margin: 0.5rem 0;
}

.hint {
  font-size: 0.9rem;
  color: #999;
  margin-top: 0.5rem;
}

.profile-section {
  background: white;
}

.profile-card {
  background: white;
  padding: 2rem 1.5rem;
  border-radius: 8px;
  margin: 1rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.avatar-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  margin-bottom: 2rem;
}

.profile-avatar {
  width: 60px;
  height: 60px;
  border-radius: 6px;
  object-fit: cover;
}

.change-avatar-btn {
  padding: 0.4rem 0.8rem;
  background: #07c160;
  color: white;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.85rem;
}

.change-avatar-btn:active {
  background: #06ad56;
}

.profile-info {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.info-item {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.info-item label {
  font-size: 0.9rem;
  color: #999;
}

.info-value {
  font-size: 1.1rem;
  color: #333;
}

.btn-logout {
  width: 100%;
  padding: 0.8rem;
  background: #fa5151;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.1s;
}

.btn-logout:active {
  background: #e84b4b;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  padding: 1rem;
}

.modal-content {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  max-width: 800px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-content.small {
  max-width: 450px;
}

.modal-content h2 {
  margin: 0 0 0.5rem 0;
  font-size: 1.3rem;
  color: #000;
  font-weight: 500;
}

.modal-subtitle {
  color: #888;
  margin: 0 0 1.5rem 0;
  font-size: 0.9rem;
}

.join-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.join-character-setup h3 {
  font-size: 1rem;
  color: #333;
  margin: 0 0 1rem 0;
}

.join-avatar-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.8rem;
  margin-bottom: 1rem;
  padding: 1rem;
  background: #f8f8f8;
  border-radius: 8px;
}

.join-avatar-preview {
  width: 60px;
  height: 60px;
  border-radius: 6px;
  object-fit: cover;
  border: 2px solid #e5e5e5;
}

.btn-upload-join-avatar {
  padding: 0.5rem 1rem;
  background: #07c160;
  color: white;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.85rem;
  transition: all 0.1s;
}

.btn-upload-join-avatar:active {
  background: #06ad56;
}

.input,
.textarea {
  width: 100%;
  padding: 0.7rem;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  font-size: 0.95rem;
  font-family: inherit;
}

.input:focus,
.textarea:focus {
  outline: none;
  border-color: #07c160;
}

.input-readonly {
  width: 100%;
  padding: 0.7rem;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  font-size: 0.95rem;
  background: #f5f5f5;
  color: #666;
  font-family: "Courier New", monospace;
}

.textarea {
  resize: vertical;
}

.error-msg {
  padding: 0.75rem;
  background: #fee;
  border: 2px solid #fcc;
  border-radius: 10px;
  color: #c33;
  text-align: center;
}

.modal-actions {
  display: flex;
  gap: 1rem;
}

.btn-cancel,
.btn-confirm {
  flex: 1;
  padding: 0.7rem;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.1s;
}

.btn-cancel {
  background: #f0f0f0;
  color: #000;
}

.btn-cancel:active {
  background: #e0e0e0;
}

.btn-confirm {
  background: #07c160;
  color: white;
}

.btn-confirm:active {
  background: #06ad56;
}

.btn-confirm:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* 管理员区域 */
.admin-section {
  margin: 1.5rem 0;
}

.btn-admin {
  width: 100%;
  padding: 0.8rem;
  background: #576b95;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.1s;
}

.btn-admin:active {
  background: #465a7f;
}

/* 管理员数据库查看 */
.admin-db-view {
  max-height: calc(90vh - 120px);
  overflow-y: auto;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: #f8f8f8;
  padding: 1.5rem;
  border-radius: 8px;
  text-align: center;
}

.stat-value {
  font-size: 2rem;
  font-weight: bold;
  color: #07c160;
  margin-bottom: 0.5rem;
}

.stat-label {
  font-size: 0.9rem;
  color: #666;
}

.db-section {
  margin-bottom: 2rem;
}

.db-section h3 {
  margin: 0 0 1rem 0;
  font-size: 1.1rem;
  color: #333;
}

.table-container {
  overflow-x: auto;
  background: white;
  border-radius: 8px;
  border: 1px solid #e5e5e5;
}

.admin-table {
  width: 100%;
  border-collapse: collapse;
}

.admin-table th {
  background: #f8f8f8;
  padding: 0.75rem;
  text-align: left;
  font-size: 0.85rem;
  font-weight: 600;
  color: #333;
  border-bottom: 2px solid #e5e5e5;
}

.admin-table td {
  padding: 0.75rem;
  border-bottom: 1px solid #f0f0f0;
  font-size: 0.85rem;
  color: #666;
}

.admin-table tr:hover {
  background: #fafafa;
}
</style>
